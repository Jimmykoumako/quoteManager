name: Go Application Tests

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:13
        ports:
          - 5432:5432
        options: --name=ladb
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: qmdb

      goapp:
        image: gedeonkoumako/goapp:1.0.0
        ports:
          - 8000:8000
        options: --name=goapp
        env:
          DATABASE_URL: postgres://postgres:postgres@ladb:5432/qmdb?sslmode=disable
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: qmdb

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Wait for Services to Start
        run: sleep 30

      - name: Install jq
        run: sudo apt-get install jq
      
      # Run API Tests for Feedback
      - name: Run API Tests
        run: |
          # Register a new user
          curl -X POST -H "Content-Type: application/json" -d '{"username": "testuser", "password": "testpassword"}' http://localhost:8000/api/public/users/register

          # Login with the registered user and retrieve the JWT token
          JWT_TOKEN=$(curl -X POST -H "Content-Type: application/json" -d '{"username": "testuser", "password": "testpassword"}' http://localhost:8000/api/public/users/login | jq -r '.token')

          # Get a list of quotes (authenticated)
          curl -X GET -H "Authorization: Bearer $JWT_TOKEN" http://localhost:8000/api/quotes

          # Get the third quote (authenticated)
          curl -X GET -H "Authorization: Bearer $JWT_TOKEN" http://localhost:8000/api/quotes/3

          # Add a new quote (authenticated)
          curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $JWT_TOKEN" -d '{"text": "New quote", "author": "Author"}' http://localhost:8000/api/quotes

          # Update the newly added quote (authenticated)
          curl -X PUT -H "Content-Type: application/json" -H "Authorization: Bearer $JWT_TOKEN" -d '{"text": "Updated quote", "author": "Author"}' http://localhost:8000/api/quotes/1

          # Delete the updated quote (authenticated)
          curl -X DELETE -H "Authorization: Bearer $JWT_TOKEN" http://localhost:8000/api/quotes/1

          # Add new feedback (authenticated)
          curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $JWT_TOKEN" -d '{"rating": 5, "comment": "Great feedback"}' http://localhost:8000/api/feedback

          # Update the newly added feedback (authenticated)
          curl -X PUT -H "Content-Type: application/json" -H "Authorization: Bearer $JWT_TOKEN" -d '{"rating": 4, "comment": "Updated feedback"}' http://localhost:8000/api/feedback/1

          # Delete the updated feedback (authenticated)
          curl -X DELETE -H "Authorization: Bearer $JWT_TOKEN" http://localhost:8000/api/feedback/1


      # Run API Tests for Feedback
      - name: Run API Tests for Feedback
        run: |
          # Get a list of feedback entries (authenticated)
          curl -X GET -H "Authorization: Bearer $JWT_TOKEN" http://localhost:8000/api/feedback

          # Get a specific feedback by ID (authenticated)
          curl -X GET -H "Authorization: Bearer $JWT_TOKEN" http://localhost:8000/api/feedback/1

          # Add new feedback for a quote (authenticated)
          curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $JWT_TOKEN" -d '{"comment": "Great quote!", "rating": 5}' http://localhost:8000/api/feedback/1

          # Update existing feedback by ID (authenticated)
          curl -X PUT -H "Content-Type: application/json" -H "Authorization: Bearer $JWT_TOKEN" -d '{"comment": "Updated comment", "rating": 4}' http://localhost:8000/api/feedback/1

          # Delete existing feedback by ID (authenticated)
          curl -X DELETE -H "Authorization: Bearer $JWT_TOKEN" http://localhost:8000/api/feedback/1

      # Run API Tests for Folders
      - name: Run API Tests for Folders
        run: |
          # Get a list of folders (authenticated)
          curl -X GET -H "Authorization: Bearer $JWT_TOKEN" http://localhost:8000/api/folders

          # Get a specific folder by ID (authenticated)
          curl -X GET -H "Authorization: Bearer $JWT_TOKEN" http://localhost:8000/api/folders/1

          # Add a new folder (authenticated)
          curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $JWT_TOKEN" -d '{"name": "MyFolder"}' http://localhost:8000/api/folders

          # Update an existing folder by ID (authenticated)
          curl -X PUT -H "Content-Type: application/json" -H "Authorization: Bearer $JWT_TOKEN" -d '{"name": "UpdatedFolder"}' http://localhost:8000/api/folders/1

          # Delete an existing folder by ID (authenticated)
          curl -X DELETE -H "Authorization: Bearer $JWT_TOKEN" http://localhost:8000/api/folders/1

      - name: Run tests
        run: go test ./routes/