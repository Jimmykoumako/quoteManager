name: Go Application User Action Tests

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:13
        ports:
          - 5432:5432
        options: --name=ladb
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: qmdb

      goapp:
        image: gedeonkoumako/goapp:1.0.0
        ports:
          - 8000:8000
        options: --name=goapp
        env:
          DATABASE_URL: postgres://postgres:postgres@ladb:5432/qmdb?sslmode=disable
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: qmdb

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Wait for Services to Start
        run: sleep 30

      - name: Install jq
        run: sudo apt-get install jq

      - name: User Registration and Login
        run: |
          # Register a new user
          curl -X POST -H "Content-Type: application/json" -d '{"username": "testuser", "password": "testpassword"}' http://localhost:8000/api/public/users/register

          # Check username availability (should return false as it's already registered)
          curl -X POST -H "Content-Type: application/json" -d '{"username": "testuser"}' http://localhost:8000/api/public/users/check-username

          # Login with the registered user and retrieve the JWT token
          JWT_TOKEN=$(curl -X POST -H "Content-Type: application/json" -d '{"username": "testuser", "password": "testpassword"}' http://localhost:8000/api/public/users/login | jq -r '.token')

          # Get user profile (authenticated)
          curl -X GET -H "Authorization: Bearer $JWT_TOKEN" http://localhost:8000/api/users/profile

      - name: Update User Profile
        run: |
          # Update user profile (authenticated)
          curl -X PUT -H "Content-Type: application/json" -H "Authorization: Bearer $JWT_TOKEN" -d '{"full_name": "Test User", "email": "testuser@example.com"}' http://localhost:8000/api/users/profile

          # Get updated user profile (authenticated)
          curl -X GET -H "Authorization: Bearer $JWT_TOKEN" http://localhost:8000/api/users/profile

      - name: Change Password
        run: |
          # Change user password (authenticated)
          curl -X PUT -H "Content-Type: application/json" -H "Authorization: Bearer $JWT_TOKEN" -d '{"old_password": "testpassword", "new_password": "newtestpassword"}' http://localhost:8000/api/users/change-password

          # Login with the updated password
          NEW_JWT_TOKEN=$(curl -X POST -H "Content-Type: application/json" -d '{"username": "testuser", "password": "newtestpassword"}' http://localhost:8000/api/public/users/login | jq -r '.token')

          # Use the new JWT token for further authenticated requests

      - name: Delete User Account
        run: |
          # Delete user account (authenticated)
          curl -X DELETE -H "Authorization: Bearer $NEW_JWT_TOKEN" http://localhost:8000/api/users/delete-account

          # Try to login with the deleted user (should fail)
          curl -X POST -H "Content-Type: application/json" -d '{"username": "testuser", "password": "newtestpassword"}' http://localhost:8000/api/public/users/login
